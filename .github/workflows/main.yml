name: Tests

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]
  release:
    types: [published]


jobs:
  lint:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3
      - uses: actions/setup-python@v4
        with:
          python-version: "3.x"
      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install .[dev]
      - name: check code with Black
        run: black --check eudract
      - name: Lint with flake8
        run: |
          # stop the build if there are Python syntax errors or undefined names
          flake8 . --count --select=E9,F63,F7,F82 --show-source --statistics
          # exit-zero treats all errors as warnings. The GitHub editor is 127 chars wide
          flake8 . --count --exit-zero --max-complexity=10 --max-line-length=127 --statistics
      - name: Test documentation
        run: |
          cp CHANGELOG.md docs/source/changelog.md
          cd docs
          make html
  tests:
    runs-on: ${{ matrix.os }}
    need: lint
    strategy:
      matrix:
        python-version: ['3.7', '3.8', '3.9', '3.10', '3.11']
        os: [ubuntu-latest, macos-latest]
    steps:
      - uses: actions/checkout@v3
      - uses: actions/setup-python@v4
        with:
          python-version: ${{ matrix.python-version }}
      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install .[dev]
      - name: Test with pytest
        run: pytest
  publish:
    name: Publish package
    runs-on: ubuntu-latest
    if: github.event_name == 'release' && github.event.action == 'published'
    need: [lint, tests]
    permissions:
      id-token: write
    steps:
    - uses: actions/checkout@v3
    - uses: actions/setup-python@v4
      with:
        python-version: "3.x"
    - name: Install pypa/build
      run: >-
        python3 -m
        pip install
        build
        --user
    - name: Build a binary wheel and a source tarball
      run: >-
        python3 -m
        build
        --sdist
        --wheel
        --outdir dist/
    - name: Publish distribution package to Test PyPI
      uses: pypa/gh-action-pypi-publish@release/v1
      with:
        repository-url: https://test.pypi.org/legacy/
    - name: Publish distribution package to PyPi
      uses: pypa/gh-action-pypi-publish@release/v1
  build-doc:
    name: Build and publish documentation
    runs-on: ubuntu-latest
    need: publish
    if: github.event_name == 'release' && github.event.action == 'published'
    steps:
    - uses: actions/checkout@v3
    - uses: actions/setup-python@v4
      with:
        python-version: "3.x"
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install .[dev]
    - name: Generate documentation
      run: |
        cp CHANGELOG.md docs/source/changelog.md
        cd docs
        make html
    - uses: actions/upload-artifact@v3
      with:
        name: docs
        path: docs/build/html
  publish-doc:
    name: commit doc on gh-pages branch
    runs-on: ubuntu-latest
    needs: build-doc
    if: github.event_name == 'release' && github.event.action == 'published'
    steps:
      - uses: actions/checkout@v3
        with:
         ref: gh-pages
      - uses: actions/download-artifact@v3
        with:
          name: docs
          path: docs
      - name: add and push
        run: |
          tag_version=${{ github.event.release.tag_name }}
          echo "building doc for $tag_version"
          mkdir "$tag_version"
          mv docs $tag_version
          git config --global user.name "${GITHUB_ACTOR}"
          git config --global user.email "${GITHUB_ACTOR_ID}+${GITHUB_ACTOR}@users.noreply.github.com"
          git add --all $tag_version
          git commit -m "new doc for $tag_version"
          git push
